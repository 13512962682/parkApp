package com.example.parkapp;

import android.Manifest;
import android.app.ActionBar;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.DatePickerDialog;
import android.app.Dialog;
import android.app.TimePickerDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Typeface;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.Log;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.ListPopupWindow;
import android.widget.PopupWindow;
import android.widget.TextView;
import android.widget.TimePicker;
import android.widget.Toast;

import com.baidu.location.BDAbstractLocationListener;
import com.baidu.location.BDLocation;
import com.baidu.location.LocationClient;
import com.baidu.location.LocationClientOption;
import com.baidu.mapapi.http.HttpClient;
import com.baidu.mapapi.map.BaiduMap;
import com.baidu.mapapi.map.BitmapDescriptor;
import com.baidu.mapapi.map.BitmapDescriptorFactory;
import com.baidu.mapapi.map.MapStatus;
import com.baidu.mapapi.map.MapStatusUpdateFactory;
import com.baidu.mapapi.map.MapView;
import com.baidu.mapapi.map.Marker;
import com.baidu.mapapi.map.MarkerOptions;
import com.baidu.mapapi.map.MyLocationData;
import com.baidu.mapapi.map.OverlayOptions;
import com.baidu.mapapi.map.TextOptions;
import com.baidu.mapapi.model.LatLng;
import com.baidu.mapapi.search.core.PoiInfo;
import com.baidu.mapapi.search.core.SearchResult;
import com.baidu.mapapi.search.poi.OnGetPoiSearchResultListener;
import com.baidu.mapapi.search.poi.PoiAddrInfo;
import com.baidu.mapapi.search.poi.PoiCitySearchOption;
import com.baidu.mapapi.search.poi.PoiDetailResult;
import com.baidu.mapapi.search.poi.PoiDetailSearchResult;
import com.baidu.mapapi.search.poi.PoiIndoorResult;
import com.baidu.mapapi.search.poi.PoiResult;
import com.baidu.mapapi.search.poi.PoiSearch;
import com.baidu.mapapi.search.sug.OnGetSuggestionResultListener;
import com.baidu.mapapi.search.sug.SuggestionResult;
import com.baidu.mapapi.search.sug.SuggestionSearch;
import com.baidu.mapapi.search.sug.SuggestionSearchOption;
import java.io.IOException;
import java.net.HttpCookie;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

public class MainActivity extends Activity {
    private MapView mMapView = null;
    private BaiduMap mBaiduMap = null;
    public LocationClient mLocationClient = null;;
    private TextView text1, text2;
    Calendar c = Calendar.getInstance();
    public SQLiteDatabase db;
    public double currentLatitude;
    public double currentLongtitude;
    private static final int PERMISSION_REQUEST_COARSE_LOCATION = 1;
    List<SuggestionResult.SuggestionInfo> suggestionInfos;
    private SuggestionSearch mSuggestionSearch;
    private PoiSearch mPoiSearch;
    private List<PoiInfo> allAddr;
    private MapStatus.Builder builder;
    private boolean isFirstLocation = true;


    int m_year = c.get(Calendar.YEAR);
    int m_month = c.get(Calendar.MONTH);
    int m_day = c.get(Calendar.DAY_OF_MONTH);
    int m_hour = c.get(Calendar.HOUR);
    int m_minute = c.get(Calendar.MINUTE);
    private String text_hour,text_minute;
    private PopupWindow popupWindow;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            if (this.checkSelfPermission(Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
                requestPermissions(new String[]{Manifest.permission.ACCESS_COARSE_LOCATION}, PERMISSION_REQUEST_COARSE_LOCATION);
            }
        }
        initMap();
        initSQL();
        initEvent();
    }

    //初始化
    private void initMap(){
        //获取地图控件引用
        mMapView = (MapView)findViewById(R.id.mapView);
        mBaiduMap = mMapView.getMap();
        mBaiduMap.setMapType(BaiduMap.MAP_TYPE_NORMAL);
        mBaiduMap.setMyLocationEnabled(true);
        mLocationClient = new LocationClient(this);
        LocationClientOption option = new LocationClientOption();
        option.setOpenGps(true); // 打开gps
        option.setCoorType("bd09ll"); // 设置坐标类型
        option.setScanSpan(1000);
        mLocationClient.setLocOption(option);
        MyLocationListener myLocationListener = new MyLocationListener();
        mLocationClient.registerLocationListener(myLocationListener);
        mLocationClient.start();
//        builder = new MapStatus.Builder();
//        builder.zoom(18.0f);
//        LatLng currentPosition = new LatLng(22.55,113.95);
//        builder.target(currentPosition);
//        mBaiduMap.setMapStatus(MapStatusUpdateFactory.newMapStatus(builder.build()));

//        LayoutInflater inflater = (LayoutInflater) this.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
//        View vPopupWindow = inflater.inflate(R.layout.activity_search_popup, null, false);
//        popupWindow = new PopupWindow(vPopupWindow, ActionBar.LayoutParams.MATCH_PARENT, ActionBar.LayoutParams.WRAP_CONTENT, true);

//        mSuggestionSearch = SuggestionSearch.newInstance();
//        OnGetSuggestionResultListener listener = new OnGetSuggestionResultListener() {
//            @Override
//            public void onGetSuggestionResult(SuggestionResult res) {
//                if(res == null||res.getAllSuggestions()==null){
//                    Log.d("right", "onGetSuggestionResult: ");
//                    return;
//                }else{
//                    suggestionInfos = res.getAllSuggestions();
//                    Integer i = 0;
//                    if (i==0) {
//                        LinearLayout Relative1 = findViewById(R.id.RelativeLayout1);
//                        popupWindow.showAsDropDown(Relative1);
//                        i=1;
//                    }
//                    showSearchPopup();
//                }
//            }
//        };
//        mSuggestionSearch.setOnGetSuggestionResultListener(listener);


        mPoiSearch = PoiSearch.newInstance();
        OnGetPoiSearchResultListener poiListener = new OnGetPoiSearchResultListener() {
            @Override
            public void onGetPoiResult(PoiResult res) {

                if (res == null || res.error == SearchResult.ERRORNO.RESULT_NOT_FOUND) {
                    Toast.makeText(MainActivity.this, "未找到结果", Toast.LENGTH_LONG).show();
                    return;
                }

                if (res.error == SearchResult.ERRORNO.NO_ERROR) {
                    allAddr = res.getAllPoi();
                    for (PoiInfo p: allAddr) {
                        Log.d("MainActivity", "p.name--->" + p.name +"p.phoneNum" + p.phoneNum +" -->p.address:" + p.address + "p.location" + p.location);
                    }
                    mBaiduMap.clear();
                    LatLng point = new LatLng(allAddr.get(0).location.latitude, allAddr.get(0).location.longitude);
                    BitmapDescriptor bitmap = BitmapDescriptorFactory
                            .fromResource(R.drawable.icon_en);
                    OverlayOptions option = new MarkerOptions()
                            .position(point)
                            .icon(bitmap);
                    mBaiduMap.addOverlay(option);
                    builder = new MapStatus.Builder();
                    builder.zoom(19.0f);
                    LatLng currentPosition = new LatLng(allAddr.get(0).location.latitude,allAddr.get(0).location.longitude);
                    builder.target(currentPosition);
                    mBaiduMap.setMapStatus(MapStatusUpdateFactory.newMapStatus(builder.build()));
                    markSingleHandler();
                }
            }
            @Override
            public void onGetPoiDetailResult(PoiDetailSearchResult poiDetailSearchResult) {

            }
            @Override
            public void onGetPoiIndoorResult(PoiIndoorResult poiIndoorResult) {

            }
            //废弃
            @Override
            public void onGetPoiDetailResult(PoiDetailResult poiDetailResult) {

            }
        };
        mPoiSearch.setOnGetPoiSearchResultListener(poiListener);
    }
    private void initSQL(){
        DataBaseUtil util = new DataBaseUtil(this);
        if (!util.checkDataBase()) {
            try {
                util.copyDataBase();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        db=SQLiteDatabase.openOrCreateDatabase("/data/data/com.example.parkapp/databases/parkingdb.db",null);
        markSingleHandler();
        mBaiduMap.setOnMarkerClickListener(new BaiduMap.OnMarkerClickListener() {
            @Override
            public boolean onMarkerClick(Marker marker) {
                String name = marker.getExtraInfo().getString("name");
                int capacity = marker.getExtraInfo().getInt("capacity");
                double latitude = marker.getExtraInfo().getDouble("latitude");
                double longtitude = marker.getExtraInfo().getDouble("longtitude");
                showPopupWindow(name,latitude,longtitude,capacity);
                return false;
            }
        });
    }
    private void initEvent() {
        setTheme(android.R.style.Theme_DeviceDefault_Light_NoActionBar_Fullscreen);
        //font设置
        Typeface font = Typeface.createFromAsset(getAssets(), "fontawesome-webfont.ttf");
        TextView mine = findViewById(R.id.mine);
        mine.setTypeface(font);

        findViewById(R.id.text1).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                new DatePickerDialog(MainActivity.this, new DatePickerDialog.OnDateSetListener() {
                    @Override
                    public void onDateSet(DatePicker datePicker, int year, int month, int day) {
                        Integer month_true=month+1;
                        text1 = findViewById(R.id.text1);
                        text1.setText(month_true + "月" + day + "日");
                        m_month = month;
                        m_day = day;
                    }
                }, m_year, m_month, m_day).show();
            }
        });

        findViewById(R.id.text2).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                new TimePickerDialog(MainActivity.this, new TimePickerDialog.OnTimeSetListener() {
                    @Override
                    public void onTimeSet(TimePicker view, int hour, int minute) {
                        text2 = findViewById(R.id.text2);
                        m_hour=hour;
                        m_minute=minute;

                        text2.setText(text_hour + ":" + text_minute);
                        mBaiduMap.clear();
                        markSingleHandler();
                    }
                }, m_hour, m_minute, true).show();
            }
        });

        findViewById(R.id.shortbook).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                //先new出一个监听器，设置好监听
                DialogInterface.OnClickListener dialogOnclicListener = new DialogInterface.OnClickListener() {

                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        switch (which) {
                            case Dialog.BUTTON_POSITIVE://距离优先
                                Intent intent = new Intent(MainActivity.this, book1.class);
                                intent.putExtra("latitude",currentLatitude);
                                intent.putExtra("longtitude",currentLongtitude);
                                startActivity(intent);
                                break;
                            case Dialog.BUTTON_NEGATIVE://价格优先
                                Intent intent2 = new Intent(MainActivity.this, book1.class);
                                intent2.putExtra("latitude",currentLatitude);
                                intent2.putExtra("longtitude",currentLongtitude);
                                startActivity(intent2);
                                break;
                            case Dialog.BUTTON_NEUTRAL://综合
                                Intent intent3 = new Intent(MainActivity.this, book1.class);
                                startActivity(intent3);
                                break;
                        }
                    }
                };
                //dialog参数设置
                AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);  //先得到构造器
                builder.setTitle("偏好选择"); //设置标题
                builder.setMessage("即将为您预约停车场，请选择偏好。"); //设置内容
                builder.setIcon(R.drawable.park);//设置图标，图片id即可
                builder.setPositiveButton("距离优先", dialogOnclicListener);
                builder.setNegativeButton("价格优先", dialogOnclicListener);
                builder.setNeutralButton("综合推荐", dialogOnclicListener);
                builder.create().show();
            }
        });

        findViewById(R.id.longbook).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Intent intent = new Intent(MainActivity.this, book_list.class);
                intent.putExtra("latitude",currentLatitude);
                intent.putExtra("longtitude",currentLongtitude);
                startActivity(intent);
            }
        });

        findViewById(R.id.mine).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Intent intent = new Intent(MainActivity.this, mine.class);
                startActivity(intent);
            }
        });


        EditText search = findViewById(R.id.search);
//        search.addTextChangedListener(new TextWatcher() {
//            @Override
//            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {
//
//            }
//
//            @Override
//            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
//                EditText searchEdit = findViewById(R.id.search);
//                String keyword = searchEdit.getText().toString();
//                mSuggestionSearch.requestSuggestion((new SuggestionSearchOption())
//                        .keyword(keyword)
//                        .city("深圳"));
//            }
//
//            @Override
//            public void afterTextChanged(Editable editable) {
//            }
//        });

//        Button searchButton = findViewById(R.id.searchButton);
//        searchButton.setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View view) {
//            }
//        });

        findViewById(R.id.searchButton).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                EditText searchEdit = findViewById(R.id.search);
                String keyword = searchEdit.getText().toString();
                mPoiSearch.searchInCity(new PoiCitySearchOption()
                        .keyword(keyword)
                        .city("深圳"));
            }
        });
    }
    private void markSingleHandler(){
        if(m_hour<10){
            text_hour="0"+m_hour;
        }else {
            text_hour=""+m_hour;
        }
        if (m_minute<10){
            text_minute="0"+m_minute;
        }else{
            text_minute=""+m_minute;
        }
        int month_true=m_month+1;
        String time = 2018+"/"+month_true+"/"+m_day+" "+text_hour+":"+text_minute+":00";
        Log.d("time", "onTimeSet: "+time);
        Cursor cursor1 = db.rawQuery("SELECT section,count(*) FROM occupancy_list where in_time < ? and out_time >? group by section",new String[]{time,time});

        Cursor cursor = db.query("parking",new String[]{"name","longtitude","latitude","capacity"},null,null,null,null,null);
        while (cursor.moveToNext()){
            int nameindex=cursor.getColumnIndex("name");
            final String name=cursor.getString(nameindex);
            int longtitudeindex=cursor.getColumnIndex("longtitude");
            double longtitude=cursor.getDouble(longtitudeindex);
            int latitudeindex=cursor.getColumnIndex("latitude");
            double latitude=cursor.getDouble(latitudeindex);
            int capacityindexindex=cursor.getColumnIndex("capacity");
            final int capacity=cursor.getInt(capacityindexindex);
            markSingle(latitude,longtitude,name,capacity,"little",0);
        }
        while (cursor1.moveToNext()) {
            Log.d("place"+cursor1.getString(0), cursor1.getString(1) + "");
            Cursor cursor2 = db.rawQuery("SELECT name,longtitude,latitude,capacity FROM parking where name = ?", new String[]{cursor1.getString(0)});
////                            Cursor cursor = db.query("parking", new String[]{"name", "longtitude", "latitude", "capacity"}, "name=", nameSearch, null, null, null);
            while (cursor2.moveToNext()) {
                int nameindex = cursor2.getColumnIndex("name");
                final String name = cursor2.getString(nameindex);
                int longtitudeindex = cursor2.getColumnIndex("longtitude");
                double longtitude = cursor2.getDouble(longtitudeindex);
                int latitudeindex = cursor2.getColumnIndex("latitude");
                double latitude = cursor2.getDouble(latitudeindex);
                int capacityindexindex = cursor2.getColumnIndex("capacity");
                final int capacity = cursor2.getInt(capacityindexindex);
                Double info = cursor1.getInt(1)/(capacity+0.0);
                Log.d("occupy", "onTimeSet: "+info);
                if(info<0.33){markSingle(latitude,longtitude,name,capacity,"little",cursor1.getInt(1));}
                else if(info<0.66){markSingle(latitude,longtitude,name,capacity,"middle",cursor1.getInt(1));}
                else{markSingle(latitude,longtitude,name,capacity,"much",cursor1.getInt(1));}
            }

        }
    }
    //标记函数
    private void markSingle(double latitude,double longtitude,String name,Integer capacity,String Info,Integer occupation) {    //地图标注
        LatLng point = new LatLng(latitude, longtitude);
        BitmapDescriptor bitmap_much = BitmapDescriptorFactory.fromResource(R.drawable.red);
        BitmapDescriptor bitmap_middle = BitmapDescriptorFactory.fromResource(R.drawable.yellow);
        BitmapDescriptor bitmap_little = BitmapDescriptorFactory.fromResource(R.drawable.green);

        Bundle mBundle = new Bundle();
        mBundle.putString("name",name);
        mBundle.putDouble("latitude",latitude);
        mBundle.putDouble("longtitude",longtitude);
        mBundle.putInt("capacity",capacity);

        OverlayOptions markOption;
        if(Info=="much") {
            markOption = new MarkerOptions()
                    .position(point)
                    .perspective(true)
                    .icon(bitmap_much)
                    .alpha(5)
                    .extraInfo(mBundle);
        }else if (Info=="middle"){
            markOption = new MarkerOptions()
                    .position(point)
                    .perspective(true)
                    .icon(bitmap_middle)
                    .alpha(5)
                    .extraInfo(mBundle);
        }else{
            markOption = new MarkerOptions()
                    .position(point)
                    .perspective(true)
                    .icon(bitmap_little)
                    .alpha(5)
                    .extraInfo(mBundle);
        }
        OverlayOptions textOption = new TextOptions()
                .text("容量"+capacity+" 占用"+occupation)
                .bgColor(0xFF1890FF)
                .fontSize(30)
                .fontColor(0xAAFFFFFF)
                .position(point)
                .extraInfo(mBundle);

        List<OverlayOptions> options = new ArrayList<OverlayOptions>();
        options.add(markOption);
        options.add(textOption);
        mBaiduMap.addOverlays(options);

    }
    //弹出框函数
    private void showPopupWindow(final String name, final double latitude, final double longtitude, int capacity) {
        LayoutInflater inflater = (LayoutInflater) this.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        View vPopupWindow = inflater.inflate(R.layout.activity_popup, null, false);
        PopupWindow popupWindow = new PopupWindow(vPopupWindow, ActionBar.LayoutParams.MATCH_PARENT, ActionBar.LayoutParams.WRAP_CONTENT, true);
        View parentView = LayoutInflater.from(MainActivity.this).inflate(R.layout.activity_popup, null);
        popupWindow.showAtLocation(parentView, Gravity.BOTTOM, 0, 0);

        TextView parkingName=popupWindow.getContentView().findViewById(R.id.parkingName);
        TextView parkingCapacity=popupWindow.getContentView().findViewById(R.id.parkingCapacity);
        Button parkingButton=popupWindow.getContentView().findViewById(R.id.parkingButton);
        parkingName.setText(name+"-停车场");
        parkingCapacity.setText("总车位："+capacity);

        parkingButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Intent i1 = new Intent();
                i1.setData(Uri.parse("baidumap://map/direction?region=shenzhen&origin="+currentLatitude+","+currentLongtitude+"&destination="+name+"&coord_type=bd09ll&mode=driving&src=andr.baidu.openAPIdemo"));
                startActivity(i1);
            }
        });
    }
    //显示搜索popupwindow
//    private void showSearchPopup(){
//        TextView suggest1=popupWindow.getContentView().findViewById(R.id.suggest1);
//        TextView suggest2=popupWindow.getContentView().findViewById(R.id.suggest2);
//        TextView suggest3=popupWindow.getContentView().findViewById(R.id.suggest3);
//        TextView suggest4=popupWindow.getContentView().findViewById(R.id.suggest4);
//        TextView suggest5=popupWindow.getContentView().findViewById(R.id.suggest5);
//        TextView suggest6=popupWindow.getContentView().findViewById(R.id.suggest6);
//        TextView suggest7=popupWindow.getContentView().findViewById(R.id.suggest7);
//        TextView suggest8=popupWindow.getContentView().findViewById(R.id.suggest8);
//        TextView suggest9=popupWindow.getContentView().findViewById(R.id.suggest9);
//        TextView suggest10=popupWindow.getContentView().findViewById(R.id.suggest10);
//        final EditText search = findViewById(R.id.search);
//        if (suggestionInfos.size()>0) {
//            suggest1.setText(suggestionInfos.get(0).key);
//            suggest1.setOnClickListener(new View.OnClickListener() {
//                @Override
//                public void onClick(View view) {
//                    search.setText(suggestionInfos.get(0).key);
////                    searchPOI(suggestionInfos.get(0).key);
//                    popupWindow.dismiss();
//                }
//            });
//        }else{
//            suggest10.setText("");
//        }
//        if (suggestionInfos.size()>1) {
//            suggest2.setText(suggestionInfos.get(1).key);
//            suggest2.setOnClickListener(new View.OnClickListener() {
//                @Override
//                public void onClick(View view) {
//                    search.setText(suggestionInfos.get(1).key);popupWindow.dismiss();
////                    searchPOI(suggestionInfos.get(1).key);
//                }
//            });
//        }else{
//            suggest10.setText("");
//        }
//        if (suggestionInfos.size()>2) {
//            suggest3.setText(suggestionInfos.get(2).key);
//            suggest3.setOnClickListener(new View.OnClickListener() {
//                @Override
//                public void onClick(View view) {
//                    search.setText(suggestionInfos.get(2).key);popupWindow.dismiss();
////                    searchPOI(suggestionInfos.get(2).key);
//                }
//            });
//        }else{
//            suggest10.setText("");
//        }
//        if (suggestionInfos.size()>3) {
//            suggest4.setText(suggestionInfos.get(3).key);
//            suggest4.setOnClickListener(new View.OnClickListener() {
//                @Override
//                public void onClick(View view) {
//                    search.setText(suggestionInfos.get(3).key);popupWindow.dismiss();
////                    searchPOI(suggestionInfos.get(3).key);
//                }
//            });
//        }else{
//            suggest10.setText("");
//        }
//        if (suggestionInfos.size()>4) {
//            suggest5.setText(suggestionInfos.get(4).key);
//            suggest5.setOnClickListener(new View.OnClickListener() {
//                @Override
//                public void onClick(View view) {
//                    search.setText(suggestionInfos.get(4).key);popupWindow.dismiss();
////                    searchPOI(suggestionInfos.get(4).key);
//                }
//            });
//        }else{
//            suggest10.setText("");
//        }
//        if (suggestionInfos.size()>5) {
//            suggest6.setText(suggestionInfos.get(5).key);
//            suggest6.setOnClickListener(new View.OnClickListener() {
//                @Override
//                public void onClick(View view) {
//                    search.setText(suggestionInfos.get(5).key);popupWindow.dismiss();
////                    searchPOI(suggestionInfos.get(5).key);
//                }
//            });
//        }else{
//            suggest10.setText("");
//        }
//        if (suggestionInfos.size()>6) {
//            suggest7.setText(suggestionInfos.get(6).key);
//            suggest7.setOnClickListener(new View.OnClickListener() {
//                @Override
//                public void onClick(View view) {
//                    search.setText(suggestionInfos.get(6).key);popupWindow.dismiss();
////                    searchPOI(suggestionInfos.get(6).key);
//                }
//            });
//        }else{
//            suggest10.setText("");
//        }
//        if (suggestionInfos.size()>7) {
//            suggest8.setText(suggestionInfos.get(7).key);
//            suggest8.setOnClickListener(new View.OnClickListener() {
//                @Override
//                public void onClick(View view) {
//                    search.setText(suggestionInfos.get(7).key);popupWindow.dismiss();
////                    searchPOI(suggestionInfos.get(7).key);
//                }
//            });
//        }else{
//            suggest10.setText("");
//        }
//        if (suggestionInfos.size()>8) {
//            suggest9.setText(suggestionInfos.get(8).key);
//            suggest9.setOnClickListener(new View.OnClickListener() {
//                @Override
//                public void onClick(View view) {
//                    search.setText(suggestionInfos.get(8).key);popupWindow.dismiss();
////                    searchPOI(suggestionInfos.get(8).key);
//                }
//            });
//        }else{
//            suggest10.setText("");
//        }
//        if (suggestionInfos.size()>9) {
//            suggest10.setText(suggestionInfos.get(9).key);
//            suggest10.setOnClickListener(new View.OnClickListener() {
//                @Override
//                public void onClick(View view) {
//                    search.setText(suggestionInfos.get(9).key);popupWindow.dismiss();
////                    searchPOI(suggestionInfos.get(9).key);
//                }
//            });
//        }else{
//            suggest10.setText("");
//        }
//    }
    //权限申请函数
    @Override
    public void onRequestPermissionsResult(int requestCode, String permissions[], int[] grantResults) {
        switch (requestCode) {
            case PERMISSION_REQUEST_COARSE_LOCATION:
                if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                    // TODO request success
                }
                break;
        }
    }

    //地图函数
    @Override
    protected void onResume() {
        mMapView.onResume();
        super.onResume();
    }
    @Override
    protected void onPause() {
        mMapView.onPause();
        super.onPause();
    }
    @Override
    protected void onDestroy() {
        mLocationClient.stop();
        mBaiduMap.setMyLocationEnabled(false);
        mMapView.onDestroy();
        mMapView = null;
        mSuggestionSearch.destroy();
        mPoiSearch.destroy();
        super.onDestroy();
    }

    public class MyLocationListener extends BDAbstractLocationListener{
        @Override
        public void onReceiveLocation(BDLocation location){
            if (location == null || mMapView == null){
                return;
            }
            MyLocationData locData = new MyLocationData.Builder()
                    .accuracy(location.getRadius())
                    .direction(location.getDirection()).latitude(location.getLatitude())
                    .longitude(location.getLongitude()).build();
            mBaiduMap.setMyLocationData(locData);
            currentLatitude = location.getLatitude();
            currentLongtitude = location.getLongitude();

            if (isFirstLocation) {
                isFirstLocation = false;
                builder = new MapStatus.Builder();
                builder.zoom(18.0f);
                LatLng currentPosition = new LatLng(currentLatitude,currentLongtitude);
                builder.target(currentPosition);
                mBaiduMap.setMapStatus(MapStatusUpdateFactory.newMapStatus(builder.build()));
            }


        }
    }

    private void setList(final List<String> userList){
    }

}





TextView suggest1=popupWindow.getContentView().findViewById(R.id.suggest1);
        TextView suggest2=popupWindow.getContentView().findViewById(R.id.suggest2);
        TextView suggest3=popupWindow.getContentView().findViewById(R.id.suggest3);
        TextView suggest4=popupWindow.getContentView().findViewById(R.id.suggest4);
        TextView suggest5=popupWindow.getContentView().findViewById(R.id.suggest5);
        TextView suggest6=popupWindow.getContentView().findViewById(R.id.suggest6);
        TextView suggest7=popupWindow.getContentView().findViewById(R.id.suggest7);
        TextView suggest8=popupWindow.getContentView().findViewById(R.id.suggest8);
        TextView suggest9=popupWindow.getContentView().findViewById(R.id.suggest9);
        TextView suggest10=popupWindow.getContentView().findViewById(R.id.suggest10);
        final EditText search = findViewById(R.id.search);
        if (suggestionInfos.size()>0) {
            suggest1.setText(suggestionInfos.get(0).key);
            suggest1.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    search.setText(suggestionInfos.get(0).key);
//                    searchPOI(suggestionInfos.get(0).key);
                }
            });
        }else{
            suggest10.setText("");
        }
        if (suggestionInfos.size()>1) {
            suggest2.setText(suggestionInfos.get(1).key);
            suggest2.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    search.setText(suggestionInfos.get(1).key);
//                    searchPOI(suggestionInfos.get(1).key);
                }
            });
        }else{
            suggest10.setText("");
        }
        if (suggestionInfos.size()>2) {
            suggest3.setText(suggestionInfos.get(2).key);
            suggest3.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    search.setText(suggestionInfos.get(2).key);
//                    searchPOI(suggestionInfos.get(2).key);
                }
            });
        }else{
            suggest10.setText("");
        }
        if (suggestionInfos.size()>3) {
            suggest4.setText(suggestionInfos.get(3).key);
            suggest4.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    search.setText(suggestionInfos.get(3).key);
//                    searchPOI(suggestionInfos.get(3).key);
                }
            });
        }else{
            suggest10.setText("");
        }
        if (suggestionInfos.size()>4) {
            suggest5.setText(suggestionInfos.get(4).key);
            suggest5.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    search.setText(suggestionInfos.get(4).key);
//                    searchPOI(suggestionInfos.get(4).key);
                }
            });
        }else{
            suggest10.setText("");
        }
        if (suggestionInfos.size()>5) {
            suggest6.setText(suggestionInfos.get(5).key);
            suggest6.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    search.setText(suggestionInfos.get(5).key);
//                    searchPOI(suggestionInfos.get(5).key);
                }
            });
        }else{
            suggest10.setText("");
        }
        if (suggestionInfos.size()>6) {
            suggest7.setText(suggestionInfos.get(6).key);
            suggest7.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    search.setText(suggestionInfos.get(6).key);
//                    searchPOI(suggestionInfos.get(6).key);
                }
            });
        }else{
            suggest10.setText("");
        }
        if (suggestionInfos.size()>7) {
            suggest8.setText(suggestionInfos.get(7).key);
            suggest8.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    search.setText(suggestionInfos.get(7).key);
//                    searchPOI(suggestionInfos.get(7).key);
                }
            });
        }else{
            suggest10.setText("");
        }
        if (suggestionInfos.size()>8) {
            suggest9.setText(suggestionInfos.get(8).key);
            suggest9.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    search.setText(suggestionInfos.get(8).key);
//                    searchPOI(suggestionInfos.get(8).key);
                }
            });
        }else{
            suggest10.setText("");
        }
        if (suggestionInfos.size()>9) {
            suggest10.setText(suggestionInfos.get(9).key);
            suggest10.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    search.setText(suggestionInfos.get(9).key);
//                    searchPOI(suggestionInfos.get(9).key);
                }
            });
        }else{
            suggest10.setText("");
        }















        //1.0
        //        BarChart barChart = popupWindow.getContentView().findViewById(R.id.bar_chart);
        //        // 获取 右边 y 轴
        //        YAxis mRAxis = barChart.getAxisRight();
        //        // 隐藏 右边 Y 轴
        //        mRAxis.setEnabled(false);
        //        // 获取 左边 Y轴
        //        YAxis mLAxis = barChart.getAxisLeft();
        //        // 取消 左边 Y轴 坐标线
        //        mLAxis.setDrawGridLines(false);
        //        // 设置 Y轴 的刻度数量
        ////        mLAxis.setLabelCount(10);
        //        barChart.getXAxis().setDrawAxisLine(false);
        //        barChart.getXAxis().setDrawGridLines(false);
        //        String[] str = new String[]{"两小时前","一小时前","当前时刻","一小时后","两小时后","三小时后",""};
        //        IAxisValueFormatter xAxisFormatter = new XAxisValueFormatter(str);
        //        XAxis xAxis = barChart.getXAxis();
        //        xAxis.setPosition(XAxis.XAxisPosition.BOTTOM);
        //        xAxis.setValueFormatter(xAxisFormatter);
        //        xAxis.setAxisMinimum(-1);
        //        xAxis.setAxisMaximum(6);
        //
        //        YAxis yAxis = barChart.getAxisLeft();
        ////将格式化标准设置给坐标轴
        //        PercentageAxisValueFormatter yAxisValueFormatter = new PercentageAxisValueFormatter();
        //        yAxis.setValueFormatter(yAxisValueFormatter);
        //        yAxis.setAxisMinimum(0);
        //        yAxis.setAxisMaximum(1.1f);
        //
        //        //保存数据的实体
        //        ArrayList<BarEntry> entries1 = new ArrayList<BarEntry>();
        //        ArrayList<BarEntry> entries2 = new ArrayList<BarEntry>();
        //        ArrayList<BarEntry> entries3 = new ArrayList<BarEntry>();
        //
        //        float value[] = new float[]{0.1f,0.4f,0.6f,0.9f,0.6f,0.7f,0.2f};
        //        float value1[] = new float[]{0.1f,0.4f,0.6f,0.9f,0.6f,0.7f,0.2f};
        //        Log.d("ceshi", value[6]+"");
        //        for(int i = 0; i < 6; i++){
        //            if(value[i]>0.66){
        //                entries1.add(new BarEntry(i, value[i]));
        //            }else if(value[i]>0.33){
        //                entries2.add(new BarEntry(i, value[i]));
        //            }else{
        //                entries3.add(new BarEntry(i, value[i]));
        //            }
        //        }
        //
        //        BarDataSet dataset1 = new BarDataSet(entries1, "紧张");
        //        dataset1.setColor(Color.RED);
        //        BarDataSet dataset2 = new BarDataSet(entries2, "较满");
        //        dataset2.setColor(Color.YELLOW);
        //        BarDataSet dataset3 = new BarDataSet(entries3, "充足");
        //        dataset3.setColor(Color.GREEN);
        //
        //        ArrayList<IBarDataSet> dataSets = new ArrayList<IBarDataSet>();
        //        dataSets.add(dataset1);
        //        dataSets.add(dataset2);
        //        dataSets.add(dataset3);
        //
        //        BarData data = new BarData(dataSets);
        //        barChart.setData(data);
        //        barChart.setDescription(null);